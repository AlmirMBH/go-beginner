1. If a variable or function starts with a capital letter it is considered exported and it can be accessed outside
of the package.
2. If we do not want to handle errors, just write '_' instead of err
3. Data types and their default values: int = 0, float64 = 0.0, bool = false, string = "", rune = ""
4. The compiler determines the type, if we do not
   - variables are mutable but the their type cannot be changed (no colon in front of equal sign required)
   - var v1, v2 = 1.2, 3.4
   - var vr = "Hello"
   - v4 := 2.4
   - v4 = 5.4
5. Byte and rune
Golang has integer types called byte and rune that are aliases for uint8 and int32 data types, respectively.
In Go, the byte and rune data types are used to distinguish characters from integer values.
In Go, there is no char data type. It uses byte and rune to represent character values.
The byte data type represents ASCII characters while the rune data type represents a more broader set of 
Unicode characters that are encoded in UTF-8 format.
The default type for character values is rune, which means, if we do not declare a type explicitly when 
declaring a variable with a character value, then Go will infer the type as rune.
6. Formatted print
- %d integer
- %c character
- %f float
- %t boolean
- %s string
- %o base 8
- %x base 16
- %v guesses based on data type
- %T type of supplied value
7. Exactly one of O_RDONLY, O_WRONLY or O_RDWR must be specified
- O_RDONLY: open the file read-only
- O_WRONLY: open the file write-only
- O_RDWR: open the file read and write

These below can be ordered
- O_APPEND: append data to the file when writing
- O_CREATE: create a new file if none exist
- O_EXCL: used with O_CREATE, file must not exist
- O_SYNC: open for synchronous I/O
- O_TRUNC: truncate regular writable file when opened

8. PACKAGES
IMPORTANT: In order to avoid errors when working with packages, configure the VSC.
- Go to file -> preferences -> settings
- in search type in gopls
- click on edit settings.json
- add "gopls": { "experimentalWorkspaceModule": true, }
8.1. Create a folder app and go to it via terminal
8.2. Type in: go mod init example/project
- Go modules allow us to manage libraries. They contain one project or library and a collection of go packages
- go.mod file contains the name of the module and version of modules that our module depends on
- For example, in go.mod you can find sth. like 
      module example/project
      go 1.19
      
